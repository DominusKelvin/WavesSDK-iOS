//
// DebugAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DebugAPI {
    /**
     Blacklist given peer
     - parameter body: (body) IP address of node 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func blacklist1(body: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        blacklist1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Blacklist given peer
     - POST /debug/blacklist
     - Moving peer to blacklist
     - parameter body: (body) IP address of node 

     - returns: RequestBuilder<Void> 
     */
    open class func blacklist1WithRequestBuilder(body: String) -> RequestBuilder<Void> {
        let path = "/debug/blacklist"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Blocks
     - parameter howMany: (path) How many last blocks to take 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func blocks1(howMany: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        blocks1WithRequestBuilder(howMany: howMany).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Blocks
     - GET /debug/blocks/{howMany}
     - Get sizes and full hashes for last blocks
     - parameter howMany: (path) How many last blocks to take 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func blocks1WithRequestBuilder(howMany: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/debug/blocks/{howMany}"
        let howManyPreEscape = "\(howMany)"
        let howManyPostEscape = howManyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{howMany}", with: howManyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Config
     - parameter full: (query) Exposes full typesafe config (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func configInfo1(full: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        configInfo1WithRequestBuilder(full: full).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Config
     - GET /debug/configInfo
     - Currently running node config
     - parameter full: (query) Exposes full typesafe config (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func configInfo1WithRequestBuilder(full: Bool? = nil) -> RequestBuilder<Void> {
        let path = "/debug/configInfo"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "full": full
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     State

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func historyInfo1(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        historyInfo1WithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     State
     - GET /debug/historyInfo
     - All history info you need to debug

     - returns: RequestBuilder<Void> 
     */
    open class func historyInfo1WithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/debug/historyInfo"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     State

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func info2(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        info2WithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     State
     - GET /debug/info
     - All info you need to debug

     - returns: RequestBuilder<Void> 
     */
    open class func info2WithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/debug/info"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     State

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func minerInfo1(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        minerInfo1WithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     State
     - GET /debug/minerInfo
     - All miner info you need to debug

     - returns: RequestBuilder<Void> 
     */
    open class func minerInfo1WithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/debug/minerInfo"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Portfolio
     - parameter address: (path) An address of portfolio      - parameter considerUnspent: (query) Taking into account pessimistic transactions from UTX pool (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func portfolios1(address: String, considerUnspent: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        portfolios1WithRequestBuilder(address: address, considerUnspent: considerUnspent).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Portfolio
     - GET /debug/portfolios/{address}
     - Get current portfolio considering pessimistic transactions in the UTX pool
     - parameter address: (path) An address of portfolio      - parameter considerUnspent: (query) Taking into account pessimistic transactions from UTX pool (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func portfolios1WithRequestBuilder(address: String, considerUnspent: Bool? = nil) -> RequestBuilder<Void> {
        var path = "/debug/portfolios/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "considerUnspent": considerUnspent
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Print
     - parameter body: (body) Json with data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func print1(body: DebugMessage, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        print1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Print
     - POST /debug/print
     - Prints a string at DEBUG level, strips to 100 chars
     - parameter body: (body) Json with data 

     - returns: RequestBuilder<Void> 
     */
    open class func print1WithRequestBuilder(body: DebugMessage) -> RequestBuilder<Void> {
        let path = "/debug/print"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Rollback to height
     - parameter body: (body) Json with data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rollback1(body: RollbackParams, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        rollback1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Rollback to height
     - POST /debug/rollback
     - Removes all blocks after given height
     - parameter body: (body) Json with data 

     - returns: RequestBuilder<Void> 
     */
    open class func rollback1WithRequestBuilder(body: RollbackParams) -> RequestBuilder<Void> {
        let path = "/debug/rollback"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Block signature
     - parameter signature: (path) Base58-encoded block signature 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func rollbackTo1(signature: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        rollbackTo1WithRequestBuilder(signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Block signature
     - DELETE /debug/rollback-to/{signature}
     - Rollback the state to the block with a given signature
     - parameter signature: (path) Base58-encoded block signature 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func rollbackTo1WithRequestBuilder(signature: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/debug/rollback-to/{signature}"
        let signaturePreEscape = "\(signature)"
        let signaturePostEscape = signaturePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{signature}", with: signaturePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     State

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func state1(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        state1WithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     State
     - GET /debug/state
     - Get current state

     - returns: RequestBuilder<Void> 
     */
    open class func state1WithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/debug/state"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     State at block
     - parameter height: (path) height 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stateWaves1(height: Int, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        stateWaves1WithRequestBuilder(height: height).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     State at block
     - GET /debug/stateWaves/{height}
     - Get state at specified height
     - parameter height: (path) height 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func stateWaves1WithRequestBuilder(height: Int) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/debug/stateWaves/{height}"
        let heightPreEscape = "\(height)"
        let heightPostEscape = heightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{height}", with: heightPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Validate Transaction
     - parameter body: (body) Signed transaction 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func validate2(body: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        validate2WithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Validate Transaction
     - POST /debug/validate
     - Validates a transaction and measures time spent in milliseconds
     - parameter body: (body) Signed transaction 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func validate2WithRequestBuilder(body: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        let path = "/debug/validate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
