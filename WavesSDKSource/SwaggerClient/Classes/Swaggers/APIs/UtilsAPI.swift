//
// UtilsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UtilsAPI {
    /**
     Compile
     - parameter body: (body) Script code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func compile1(body: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        compile1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Compile
     - POST /utils/script/compile
     - Compiles string code to base64 script representation
     - parameter body: (body) Script code 

     - returns: RequestBuilder<Void> 
     */
    open class func compile1WithRequestBuilder(body: String) -> RequestBuilder<Void> {
        let path = "/utils/script/compile"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Compile Contract
     - parameter body: (body) Contract code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func compileContract1(body: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        compileContract1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Compile Contract
     - POST /utils/script/compileContract
     - Compiles string code to base64 contract representation
     - parameter body: (body) Contract code 

     - returns: RequestBuilder<Void> 
     */
    open class func compileContract1WithRequestBuilder(body: String) -> RequestBuilder<Void> {
        let path = "/utils/script/compileContract"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Decompile
     - parameter body: (body) Script code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func decompile1(body: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        decompile1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Decompile
     - POST /utils/script/decompile
     - Decompiles base64 script representation to string code
     - parameter body: (body) Script code 

     - returns: RequestBuilder<Void> 
     */
    open class func decompile1WithRequestBuilder(body: String) -> RequestBuilder<Void> {
        let path = "/utils/script/decompile"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Estimate
     - parameter body: (body) A compiled Base64 code 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func estimate1(body: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        estimate1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Estimate
     - POST /utils/script/estimate
     - Estimates compiled code in Base64 representation
     - parameter body: (body) A compiled Base64 code 

     - returns: RequestBuilder<Void> 
     */
    open class func estimate1WithRequestBuilder(body: String) -> RequestBuilder<Void> {
        let path = "/utils/script/estimate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Hash
     - parameter body: (body) Message to hash 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func hashFast1(body: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        hashFast1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Hash
     - POST /utils/hash/fast
     - Return FastCryptographicHash of specified message
     - parameter body: (body) Message to hash 

     - returns: RequestBuilder<Void> 
     */
    open class func hashFast1WithRequestBuilder(body: String) -> RequestBuilder<Void> {
        let path = "/utils/hash/fast"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Hash
     - parameter body: (body) Message to hash 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func hashSecure1(body: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        hashSecure1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Hash
     - POST /utils/hash/secure
     - Return SecureCryptographicHash of specified message
     - parameter body: (body) Message to hash 

     - returns: RequestBuilder<Void> 
     */
    open class func hashSecure1WithRequestBuilder(body: String) -> RequestBuilder<Void> {
        let path = "/utils/hash/secure"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Seed of specified length
     - parameter length: (path) Seed length  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func length1(length: Int, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        length1WithRequestBuilder(length: length).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Seed of specified length
     - GET /utils/seed/{length}
     - Generate random seed of specified length
     - parameter length: (path) Seed length  

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func length1WithRequestBuilder(length: Int) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/utils/seed/{length}"
        let lengthPreEscape = "\(length)"
        let lengthPostEscape = lengthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{length}", with: lengthPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Seed

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func seedRoute1(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        seedRoute1WithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Seed
     - GET /utils/seed
     - Generate random seed

     - returns: RequestBuilder<Void> 
     */
    open class func seedRoute1WithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/utils/seed"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Hash
     - parameter body: (body) Message to hash (base58 string)      - parameter privateKey: (path) privateKey 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sign1(body: String, privateKey: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sign1WithRequestBuilder(body: body, privateKey: privateKey).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Hash
     - POST /utils/sign/{privateKey}
     - Return FastCryptographicHash of specified message
     - parameter body: (body) Message to hash (base58 string)      - parameter privateKey: (path) privateKey 

     - returns: RequestBuilder<Void> 
     */
    open class func sign1WithRequestBuilder(body: String, privateKey: String) -> RequestBuilder<Void> {
        var path = "/utils/sign/{privateKey}"
        let privateKeyPreEscape = "\(privateKey)"
        let privateKeyPostEscape = privateKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{privateKey}", with: privateKeyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Time

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func time1(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        time1WithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Time
     - GET /utils/time
     - Current Node time (UTC)

     - returns: RequestBuilder<Void> 
     */
    open class func time1WithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/utils/time"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Serialize transaction
     - parameter body: (body) Transaction data including &lt;a href&#x3D;&#x27;transaction-types.html&#x27;&gt;type&lt;/a&gt; and signature/proofs 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func transactionSerialize1(body: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        transactionSerialize1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Serialize transaction
     - POST /utils/transactionSerialize
     - Serialize transaction
     - parameter body: (body) Transaction data including &lt;a href&#x3D;&#x27;transaction-types.html&#x27;&gt;type&lt;/a&gt; and signature/proofs 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func transactionSerialize1WithRequestBuilder(body: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        let path = "/utils/transactionSerialize"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
