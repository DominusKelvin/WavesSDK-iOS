//
// PeersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PeersAPI {
    /**
     Peer list

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func allPeers1(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        allPeers1WithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Peer list
     - GET /peers/all
     - Peer list

     - returns: RequestBuilder<Void> 
     */
    open class func allPeers1WithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/peers/all"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Blacklisted peers list

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func blacklistedPeers1(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        blacklistedPeers1WithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Blacklisted peers list
     - GET /peers/blacklisted
     - Blacklisted peers list

     - returns: RequestBuilder<Void> 
     */
    open class func blacklistedPeers1WithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/peers/blacklisted"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove all blacklisted peers

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func clearBlacklist1(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        clearBlacklist1WithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove all blacklisted peers
     - POST /peers/clearblacklist
     - Clear blacklist

     - returns: RequestBuilder<Void> 
     */
    open class func clearBlacklist1WithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/peers/clearblacklist"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Connect to peer
     - parameter body: (body) Json with data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func connect1(body: ConnectReq, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        connect1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Connect to peer
     - POST /peers/connect
     - Connect to peer
     - parameter body: (body) Json with data 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func connect1WithRequestBuilder(body: ConnectReq) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        let path = "/peers/connect"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Connected peers list

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func connectedPeers1(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        connectedPeers1WithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Connected peers list
     - GET /peers/connected
     - Connected peers list

     - returns: RequestBuilder<Void> 
     */
    open class func connectedPeers1WithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/peers/connected"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Suspended peers list

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func suspendedPeers1(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        suspendedPeers1WithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Suspended peers list
     - GET /peers/suspended
     - Suspended peers list

     - returns: RequestBuilder<Void> 
     */
    open class func suspendedPeers1WithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/peers/suspended"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
