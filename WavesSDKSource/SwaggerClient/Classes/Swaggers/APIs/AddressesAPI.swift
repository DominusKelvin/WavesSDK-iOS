//
// AddressesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AddressesAPI {
    /**
     Balance
     - parameter address: (path) Address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func balance1(address: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        balance1WithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Balance
     - GET /addresses/balance/{address}
     - Account's balance
     - parameter address: (path) Address 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func balance1WithRequestBuilder(address: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/balance/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Details for balance
     - parameter address: (path) Address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func balanceDetails1(address: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        balanceDetails1WithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Details for balance
     - GET /addresses/balance/details/{address}
     - Account's balances
     - parameter address: (path) Address 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func balanceDetails1WithRequestBuilder(address: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/balance/details/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirmed balance
     - parameter address: (path) Address      - parameter confirmations: (path) 0 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func balanceWithConfirmations1(address: String, confirmations: Int, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        balanceWithConfirmations1WithRequestBuilder(address: address, confirmations: confirmations).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Confirmed balance
     - GET /addresses/balance/{address}/{confirmations}
     - Balance of {address} after {confirmations}
     - parameter address: (path) Address      - parameter confirmations: (path) 0 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func balanceWithConfirmations1WithRequestBuilder(address: String, confirmations: Int) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/balance/{address}/{confirmations}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let confirmationsPreEscape = "\(confirmations)"
        let confirmationsPostEscape = confirmationsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{confirmations}", with: confirmationsPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func create1(completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        create1WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create
     - POST /addresses
     - Create a new account in the wallet(if it exists)

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func create1WithRequestBuilder() -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        let path = "/addresses"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete
     - parameter address: (path) Address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAddress1(address: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        deleteAddress1WithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Delete
     - DELETE /addresses/{address}
     - Remove the account with address {address} from the wallet
     - parameter address: (path) Address 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func deleteAddress1WithRequestBuilder(address: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Balance
     - parameter address: (path) Address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func effectiveBalance1(address: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        effectiveBalance1WithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Balance
     - GET /addresses/effectiveBalance/{address}
     - Account's balance
     - parameter address: (path) Address 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func effectiveBalance1WithRequestBuilder(address: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/effectiveBalance/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Confirmed balance
     - parameter address: (path) Address      - parameter confirmations: (path) 0 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func effectiveBalanceWithConfirmations1(address: String, confirmations: Int, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        effectiveBalanceWithConfirmations1WithRequestBuilder(address: address, confirmations: confirmations).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Confirmed balance
     - GET /addresses/effectiveBalance/{address}/{confirmations}
     - Balance of {address} after {confirmations}
     - parameter address: (path) Address      - parameter confirmations: (path) 0 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func effectiveBalanceWithConfirmations1WithRequestBuilder(address: String, confirmations: Int) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/effectiveBalance/{address}/{confirmations}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let confirmationsPreEscape = "\(confirmations)"
        let confirmationsPostEscape = confirmationsPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{confirmations}", with: confirmationsPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Complete Data
     - parameter address: (path) Address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getData1(address: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        getData1WithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Complete Data
     - GET /addresses/data/{address}
     - Read all data posted by an account
     - parameter address: (path) Address 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func getData1WithRequestBuilder(address: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/data/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Data by Key
     - parameter address: (path) Address      - parameter key: (path) Data key 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getDataItem1(address: String, key: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        getDataItem1WithRequestBuilder(address: address, key: key).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Data by Key
     - GET /addresses/data/{address}/{key}
     - Read data associated with an account and a key
     - parameter address: (path) Address      - parameter key: (path) Data key 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func getDataItem1WithRequestBuilder(address: String, key: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/data/{address}/{key}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let keyPreEscape = "\(key)"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{key}", with: keyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Post Data to Blockchain
     - parameter body: (body) Json with data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postData1(body: DataRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postData1WithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Post Data to Blockchain
     - POST /addresses/data
     - parameter body: (body) Json with data 

     - returns: RequestBuilder<Void> 
     */
    open class func postData1WithRequestBuilder(body: DataRequest) -> RequestBuilder<Void> {
        let path = "/addresses/data"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Address from Public Key
     - parameter publicKey: (path) Public key Base58-encoded 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicKey1(publicKey: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        publicKey1WithRequestBuilder(publicKey: publicKey).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Address from Public Key
     - GET /addresses/publicKey/{publicKey}
     - Generate a address from public key
     - parameter publicKey: (path) Public key Base58-encoded 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func publicKey1WithRequestBuilder(publicKey: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/publicKey/{publicKey}"
        let publicKeyPreEscape = "\(publicKey)"
        let publicKeyPostEscape = publicKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{publicKey}", with: publicKeyPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Addresses

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func root1(completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        root1WithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Addresses
     - GET /addresses
     - Get wallet accounts addresses

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func root1WithRequestBuilder() -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        let path = "/addresses"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Details for account
     - parameter address: (path) Address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func scriptInfo1(address: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        scriptInfo1WithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Details for account
     - GET /addresses/scriptInfo/{address}
     - Account's script
     - parameter address: (path) Address 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func scriptInfo1WithRequestBuilder(address: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/scriptInfo/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Seed
     - parameter address: (path) Address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func seed1(address: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        seed1WithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Seed
     - GET /addresses/seed/{address}
     - Export seed value for the {address}
     - parameter address: (path) Address 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func seed1WithRequestBuilder(address: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/seed/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Seq
     - parameter from: (path) Start address      - parameter to: (path) address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func seq1(from: Int, to: Int, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        seq1WithRequestBuilder(from: from, to: to).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Seq
     - GET /addresses/seq/{from}/{to}
     - Get wallet accounts addresses
     - parameter from: (path) Start address      - parameter to: (path) address 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func seq1WithRequestBuilder(from: Int, to: Int) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/seq/{from}/{to}"
        let fromPreEscape = "\(from)"
        let fromPostEscape = fromPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{from}", with: fromPostEscape, options: .literal, range: nil)
        let toPreEscape = "\(to)"
        let toPostEscape = toPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{to}", with: toPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Sign
     - parameter body: (body) Message to sign as a plain string      - parameter address: (path) Address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sign3(body: String, address: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        sign3WithRequestBuilder(body: body, address: address).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Sign
     - POST /addresses/sign/{address}
     - Sign a message with a private key associated with {address}
     - parameter body: (body) Message to sign as a plain string      - parameter address: (path) Address 

     - returns: RequestBuilder<Void> 
     */
    open class func sign3WithRequestBuilder(body: String, address: String) -> RequestBuilder<Void> {
        var path = "/addresses/sign/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Sign
     - parameter body: (body) Message to sign as a plain string      - parameter address: (path) Address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signText1(body: String, address: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        signText1WithRequestBuilder(body: body, address: address).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Sign
     - POST /addresses/signText/{address}
     - Sign a message with a private key associated with {address}
     - parameter body: (body) Message to sign as a plain string      - parameter address: (path) Address 

     - returns: RequestBuilder<Void> 
     */
    open class func signText1WithRequestBuilder(body: String, address: String) -> RequestBuilder<Void> {
        var path = "/addresses/signText/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Validate
     - parameter address: (path) Address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func validate1(address: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        validate1WithRequestBuilder(address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Validate
     - GET /addresses/validate/{address}
     - Check whether address {address} is valid or not
     - parameter address: (path) Address 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func validate1WithRequestBuilder(address: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/validate/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Verify
     - parameter body: (body) Json with data      - parameter address: (path) Address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func verify1(body: SignedMessage, address: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        verify1WithRequestBuilder(body: body, address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Verify
     - POST /addresses/verify/{address}
     - Check a signature of a message signed by an account
     - parameter body: (body) Json with data      - parameter address: (path) Address 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func verify1WithRequestBuilder(body: SignedMessage, address: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/verify/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Verify text
     - parameter body: (body) Json with data      - parameter address: (path) Address 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func verifyText1(body: SignedMessage, address: String, completion: @escaping ((_ data: Function1RequestContextFutureRouteResult?,_ error: Error?) -> Void)) {
        verifyText1WithRequestBuilder(body: body, address: address).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Verify text
     - POST /addresses/verifyText/{address}
     - Check a signature of a message signed by an account
     - parameter body: (body) Json with data      - parameter address: (path) Address 

     - returns: RequestBuilder<Function1RequestContextFutureRouteResult> 
     */
    open class func verifyText1WithRequestBuilder(body: SignedMessage, address: String) -> RequestBuilder<Function1RequestContextFutureRouteResult> {
        var path = "/addresses/verifyText/{address}"
        let addressPreEscape = "\(address)"
        let addressPostEscape = addressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{address}", with: addressPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Function1RequestContextFutureRouteResult>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
